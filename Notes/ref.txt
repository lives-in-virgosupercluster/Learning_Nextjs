-framework for Reactjs
Difference between a library and a framework?
bigger than a library
Provides SDK
Built in Server Side Rendering

Difference between CSR and SSR
so in CSR the client will download the code and render it in client Side

SSR-
Fetch Data
Pre-Render
Good for SEO

SSR VS CSR
performance
cache Data
great for SEO

two ways of routing-
App based and file based

three folders in nextjs
Public pages styles
Public-used to store static files like images
pages-used to store source code
styles-used to store CSS

getServerSideProps-
You should use getServerSideProps if you need to render a page that relies on personalized user data, or information that can only be known at request time. For example, authorization headers or a geolocation.

If you do not need to fetch the data at request time, or would prefer to cache the data and pre-rendered HTML, we recommend using getStaticProps

getServerSideProps runs in the server side only hence you need to pass the props to the react code

also getServerSideProps runs first obv

getStaticProps-
   You should use getStaticProps if:

The data required to render the page is available at build time ahead of a user’s request
The data comes from a headless CMS
The page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance
The data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.
getStaticProps always runs on the server and never on the client.


getStaticPaths-

In Next.js, the getStaticPaths function is used in conjunction with getStaticProps to enable dynamic routes with pre-rendering. When you have pages with dynamic routes, such as /posts/[id], where [id] is a dynamic parameter, you often need to generate a list of all possible values for [id] during the build process. This is where getStaticPaths comes into play.

First, you define a dynamic route in your pages directory. For example, you might have a file named [id].js inside a posts directory under the pages directory. This creates a dynamic route like /posts/[id].

Implement getStaticPaths:
In the same file ([id].js), you export a function named getStaticPaths. This function is responsible for returning an object that contains the paths field, which is an array of possible values for the dynamic parameter.

Implement getStaticProps:
Additionally, you need to implement the getStaticProps function in the same file to fetch the data for a specific dynamic route.